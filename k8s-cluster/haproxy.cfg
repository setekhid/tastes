#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #

    # daemon
    # log /dev/log local0
    # log /dev/log local1 notice
    spread-checks 5
    max-spread-checks 15000
    maxconn     50000
    # stats socket /var/run/haproxy/socket
    # server-state-file global
    # server-state-base /var/state/haproxy/

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    # load-server-state-from-file global
    log                     global
    retries                 3
    backlog                 10000
    maxconn                 10000
    timeout connect         3s
    timeout client          30s
    timeout server          30s
    timeout tunnel          3600s
    timeout http-keep-alive 1s
    timeout http-request    15s
    timeout queue           30s
    timeout tarpit          60s
    option dontlognull
    option http-server-close
    option redispatch

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
# frontend  main *:5000
#     acl url_static       path_beg       -i /static /images /javascript /stylesheets
#     acl url_static       path_end       -i .jpg .gif .png .css .js

#     use_backend static          if url_static
#     default_backend             app

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
# backend static
#     balance     roundrobin
#     server      static 127.0.0.1:4331 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
# backend app
#     balance     roundrobin
#     server  app1 127.0.0.1:5001 check
#     server  app2 127.0.0.1:5002 check
#     server  app3 127.0.0.1:5003 check
#     server  app4 127.0.0.1:5004 check

frontend dcos-8080
    bind *:8080
    mode http
    use_backend dcos-8080

backend dcos-8080
    balance roundrobin
    mode http
    option forwardfor
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    server master1 kube-apiserver1:8080 check
    server master2 kube-apiserver2:8080 check
    server master3 kube-apiserver3:8080 check
